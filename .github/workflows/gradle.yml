# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI-Back

on:
  pull_request:
    branches: [ "Develop" ]

env:
  PROJECT_NAME: CMC
  BUCKET_NAME: cmc-build-bucket
  CODE_DEPLOY_APP_NAME: CMC-deploy
  DEPLOYMENT_GROUP_NAME: CMC-deploy-group
  ZIP_NAME: cmc-build

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
            
    - name: Create DEVELOP YML and Copy
      run: |
        cd ./src/main/resources
        touch ./application-develop.yml
        echo "${{ secrets.CMC_DEVELOP_YML }}" > ./application-develop.yml
        
    - name: Create TEST YML
      run: |
        cd ./src/test
        mkdir resources
        cd ./resources
        touch ./application.yml
        echo "${{ secrets.CMC_TEST_YML }}" > ./application.yml
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean build -x test
      shell: bash

#    - name: Test with Gradle
#      run: ./gradlew test
      
    # 전송할 파일을 담을 디렉토리 생성
    - name: Make Directory for deliver
      run: mkdir deploy
      shell: bash

    # Jar 파일 Copy
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy/
      shell: bash

    # appspec.yml Copy
    - name: Copy appspec.yml
      run: cp appspec.yml ./deploy/
      shell: bash

    # 압축파일 형태로 전달
    - name: Make zip file
      run: zip -r -qq -j ./$ZIP_NAME.zip ./deploy
      shell: bash

    #aws 접근 id, key
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # S3 Bucket으로 copy
    - name: Deliver to AWS S3
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: aws s3 cp --region ap-northeast-2 ./$ZIP_NAME.zip s3://$BUCKET_NAME/$PROJECT_NAME/$ZIP_NAME.zip
      shell: bash

    # Deploy
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
        --application-name $CODE_DEPLOY_APP_NAME \
        --deployment-group-name $DEPLOYMENT_GROUP_NAME \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$ZIP_NAME.zip \
        --region ap-northeast-2
      shell: bash
